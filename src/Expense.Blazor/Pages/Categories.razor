@page "/categories"
@inject CategoryService categoryService
@inject NavigationService navigationService

<h3 class="text-center">Categories</h3>

@if (_result != null)
{
    <div class="table-responsive pt-3">
        <table class="table table-striped align-middle table-bordered">
            <thead>
                <tr>
                    <th scope="col">Id</th>
                    <th scope="col">Name</th>
                    <th scope="col">CreatedAt</th>
                    <th scope="col">UpdatedAt</th>
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var category in _result.Categories.Data)
                {
                    <tr>
                        <td scope="row">@category.Id</td>
                        <td>@category.Name</td>
                        <td>@category.CreatedAt</td>
                        @if (category.UpdatedAt != null)
                        {
                            <td>@category.UpdatedAt</td>
                        }
                        else
                        {
                            <td>-------</td>
                        }
                        <td>
                            <button type="button" class="btn btn-primary" @onclick="() => navigationService.NavigateToUpdateCategory(category.Id)">
                                <i class="bi bi-pencil-square"></i> Edit
                            </button>
                            |
                            <button type="button" class="btn btn-danger">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="pagination d-flex justify-content-center align-items-center mt-3">
            <button
                class="btn btn-primary me-2"
                @onclick="PreviousPage"
                disabled="@((Page <= 1))">
                Previous
            </button>

            @for (int i = 1; i <= TotalPages; i++)
            {
                <button
                    class="btn @((i == Page ? "btn-secondary" : "btn-outline-primary")) me-1"
                    @onclick="(() => GoToPage(i))">
                    @i
                </button>
            }

            <button
                class="btn btn-primary ms-2"
                @onclick="NextPage"
                disabled="@((Page * PageSize) >= TotalCount)">
                Next
            </button>
        </div>
    </div>
}

@code {
    private GetCategoriesResult? _result;
    private long TotalCount;
    private int Page = 1;
    private int PageSize = 20;
    private long TotalPages => (TotalCount + PageSize - 1) / PageSize;

    protected override async Task OnInitializedAsync()
    {
        _result = await LoadDataAsync();

        TotalCount = _result!.Categories.Count;
    }

    private async Task<GetCategoriesResult?> LoadDataAsync()
    {
        return await categoryService.GetCategoriesAsync(Page, PageSize);
    }

    private async Task NextPage()
    {
        if ((Page * PageSize) < TotalCount)
        {
            Page++;

            await LoadDataAsync();
        }
    }

    private async Task PreviousPage()
    {
        if (Page > 1)
        {
            Page--;

            await LoadDataAsync();
        }
    }

    private async Task GoToPage(int pageNumber)
    {
        Page = pageNumber;
        await LoadDataAsync();
    }
}
