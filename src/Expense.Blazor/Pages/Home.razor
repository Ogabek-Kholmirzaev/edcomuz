@page "/"
@inject IJSRuntime jsRuntime
@inject ReportsService reportService

<PageTitle>Home</PageTitle>

<h1 class="text-center">Dashboard: @(_result?.Reports.FirstOrDefault()?.Year) </h1>

<h3 class="text-center">Chart By Monthly Outlays Price</h3>
<div id="chartdiv"></div>

<hr />

<h3 class="text-center">Table By Monthly Outlays</h3>
@if (_result != null)
{
    <div class="table-responsive pt-3">
        <table class="table table-striped align-middle table-bordered text-center">
            <thead>
                <tr>
                    <th scope="col">Month</th>
                    <th scope="col">Total Price</th>
                    <th scope="col">Total Count</th>
                </tr>
            </thead>
            <tbody>
                @if (!_result.Reports.Any())
                {
                    <tr>
                        <td colspan="3">No reports available.</td>
                    </tr>
                }
                else
                {
                    foreach (var report in _result.Reports)
                    {
                        <tr>
                            <td scope="row">@report.MonthName</td>
                            <td>@($"${report.TotalPrice}")</td>
                            <td>@report.TotalCount</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}
else
{
    <p>Loading reports...</p>
}

@code {
    private GetReportsByYearResult _result = new GetReportsByYearResult();

    protected override async Task OnInitializedAsync()
    {
        _result = await reportService.GetReportsByYearAsync(2024);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _result = await reportService.GetReportsByYearAsync(2024);

            var reports = _result!.Reports;

            await jsRuntime.InvokeVoidAsync("GeneratePieChartCount", reports, "totalCount");

            StateHasChanged();
        }
    }
}
