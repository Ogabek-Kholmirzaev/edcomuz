@page "/categories"
@inject CategoryService categoryService
@inject NavigationService navigationService
@inject IJSRuntime jsRuntime
@inject ToastrService toastrService
@inject NavigationManager navigationManager

<h3 class="text-center">Categories</h3>

<button class="btn btn-primary mb-3" @onclick="() => navigationService.NavigateToCreateCategory()">
    <i class="bi bi-plus-circle"></i> Create
</button>

@if (_result != null)
{
    <div class="table-responsive pt-3">
        <table class="table table-striped align-middle table-bordered text-center">
            <thead>
                <tr>
                    <th scope="col">Id</th>
                    <th scope="col">Name</th>
                    <th scope="col">CreatedAt</th>
                    <th scope="col">UpdatedAt</th>
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (!_result.Categories.Data.Any())
                {
                    <tr>
                        <td colspan="5">No categories available.</td>
                    </tr>
                }
                else
                {
                    foreach (var category in _result.Categories.Data)
                    {
                        <tr>
                            <td scope="row">@category.Id</td>
                            <td>@category.Name</td>
                            <td>@category.CreatedAt.ToLocalTime()</td>
                            @if (category.UpdatedAt != null)
                            {
                                <td>@category.UpdatedAt?.ToLocalTime()</td>
                            }
                            else
                            {
                                <td>-------</td>
                            }
                            <td>
                                <button type="button" class="btn btn-primary" @onclick="() => navigationService.NavigateToUpdateCategory(category.Id)">
                                    <i class="bi bi-pencil-square"></i> Edit
                                </button>
                                |
                                <button type="button"
                                        class="btn btn-danger" @onclick="() => ConfirmDeleteAsync(category.Id)">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        <div class="pagination d-flex justify-content-center align-items-center mt-3 mb-3">
            <button
                class="btn btn-primary me-2"
                disabled="@((Page <= 1))"
                @onclick="() => navigationService.NavigateToCategories(Page - 1, PageSize, true)">
                Previous
            </button>

            @foreach (var item in _pages)
            {
                <button
                    class="btn @((item == Page ? "btn-secondary" : "btn-outline-primary")) me-1"
                    @onclick="(() => navigationService.NavigateToCategories(item, PageSize, true))">
                    @item
                </button>
            }

            <button
                class="btn btn-primary ms-2"
                disabled="@((Page * PageSize) >= TotalCount)"
                @onclick="() => navigationService.NavigateToCategories(Page + 1, PageSize, true)">
                Next
            </button>
        </div>
    </div>
}
else
{
    <p>Loading categories...</p>
}

@code {
    private List<int> _pages = new();
    private GetCategoriesResult? _result;
    private long TotalCount;
    private int Page;
    private int PageSize;
    private long TotalPages;

    protected override async Task OnInitializedAsync()
    {
        Page = 1;
        PageSize = 50;

        if (navigationManager.TryGetQueryString<int>("page", out int page))
        {
            Page = page;
        }

        if (navigationManager.TryGetQueryString<int>("pageSize", out int pageSize))
        {
            PageSize = pageSize;
        }

        _result = await LoadDataAsync(Page, PageSize);

        TotalCount = _result!.Categories.Count;
        TotalPages = (TotalCount + (int)PageSize - 1) / (int)PageSize;

        for (int i = 1; i <= (int)TotalPages; i++)
        {
            _pages.Add(i);
        }
    }

    private async Task<GetCategoriesResult?> LoadDataAsync(int page, int pageSize)
    {
        return await categoryService.GetCategoriesAsync(Page, PageSize);
    }

    private async Task ConfirmDeleteAsync(long id)
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete category ID {id}?");

        if (confirmed)
        {
            await DeleteCategoryAsync(id);
        }
    }

    private async Task DeleteCategoryAsync(long id)
    {
        var response = await categoryService.DeleteCategoryAsync(id);

        if (response)
        {
            await toastrService.ShowSuccess("Category deleted successfully", "Success");
            await Task.Delay(500);
            await OnInitializedAsync();
        }
        else
        {
            await toastrService.ShowError("Failed to delete category", "Error");
        }
    }
}
