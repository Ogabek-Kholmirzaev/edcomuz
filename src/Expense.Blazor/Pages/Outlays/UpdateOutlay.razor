@page "/outlays/update/{id:long}"
@inject OutlayService outlayService
@inject CategoryService categoryService
@inject NavigationService navigationService
@inject ToastrService toastrService

<h3 class="text-center">Update Outlay Id: @outlay.Id</h3>

<EditForm Model="@outlay" OnValidSubmit="HandleValidSubmit" class="justify-content-center">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label for="categoryId" class="form-label">Category</label>
        <InputSelect id="categoryId" @bind-Value="outlay.CategoryId" class="form-select">
            <option value="">-- Select a Category --</option>
            @foreach (var category in categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => outlay.CategoryId)" />
    </div>

    <div class="mb-3">
        <label for="date" class="form-label">Date</label>
        <InputDate id="date" @bind-Value="outlay.Date" class="form-control" />
        <ValidationMessage For="@(() => outlay.Date)" />
    </div>

    <div class="mb-3">
        <label for="price" class="form-label">Price</label>
        <InputNumber id="price" @bind-Value="outlay.Price" class="form-control" />
        <ValidationMessage For="@(() => outlay.Price)" />
    </div>

    <div class="mb-3">
        <label for="comment" class="form-label">Comment (Optional)</label>
        <InputText id="comment" @bind-Value="outlay.Comment" class="form-control" />
    </div>

    <div class="mt-3">
        <button type="submit" class="btn btn-primary me-2">Update</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

<style>
    .validation-message {
        color: red;
        font-size: 0.9rem;
    }

    .validation-summary {
        color: red;
        font-size: 1rem;
        margin-bottom: 1rem;
    }
</style>

@code {
    [Parameter]
    public long Id { get; set; }

    private OutlayDto outlay = new();
    private List<CategoryInputTextDto> categories = new();

    protected override async Task OnInitializedAsync()
    {
        categories = (await categoryService.GetCategoriesInputTextAsync())!.CategoriesInputText;

        var existingOutlay = await outlayService.GetOutlayByIdAsync(Id);

        if (existingOutlay is not null)
        {
            outlay = existingOutlay.Outlay;
        }
        else
        {
            await toastrService.ShowError("Outlay not found.");
            navigationService.NavigateToOutlays();
        }
    }

    private async Task HandleValidSubmit()
    {
        var response = await outlayService.UpdateOutlayAsync(Id, outlay);

        if (response)
        {
            await toastrService.ShowSuccess("Outlay updated successfully!");
            navigationService.NavigateToOutlays();
        }
        else
        {
            await toastrService.ShowError("Failed to update outlay.");
        }
    }

    private void Cancel()
    {
        navigationService.NavigateToOutlays();
    }
}
