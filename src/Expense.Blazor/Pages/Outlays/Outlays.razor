@page "/outlays"
@inject OutlayService outlaysService
@inject NavigationService navigationService
@inject IJSRuntime jsRuntime
@inject ToastrService toastrService
@inject NavigationManager navigationManager
@inject CategoryService categoryService

<h3 class="text-center">Outlays</h3>

<button class="btn btn-primary mb-3" @onclick="() => navigationService.NavigateToCreateOutlay()">
    <i class="bi bi-plus-circle"></i> Create
</button>

<div class="row mb-3">
    <div class="col-md-3">
        <label for="categoryId" class="form-label">Category</label>
        <InputSelect id="categoryId" @bind-Value="_filters.CategoryId" class="form-select">
            <option value="">-- All Categories --</option>
            @foreach (var category in _categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </InputSelect>
    </div>
    <div class="col-md-3">
        <label for="comment" class="form-label">Comment</label>
        <InputText id="comment" @bind-Value="_filters.Comment" class="form-control" />
    </div>
    <div class="col-md-3">
        <label for="dateFrom" class="form-label">Date From</label>
        <InputDate id="dateFrom" @bind-Value="_filters.DateFrom" class="form-control" />
    </div>
    <div class="col-md-3">
        <label for="dateTo" class="form-label">Date To</label>
        <InputDate id="dateTo" @bind-Value="_filters.DateTo" class="form-control" />
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-3">
        <label for="priceFrom" class="form-label">Price From</label>
        <InputNumber id="priceFrom" @bind-Value="_filters.PriceFrom" class="form-control" />
    </div>
    <div class="col-md-3">
        <label for="priceTo" class="form-label">Price To</label>
        <InputNumber id="priceTo" @bind-Value="_filters.PriceTo" class="form-control" />
    </div>
    <div class="col-md-6 d-flex align-items-end">
        <button class="btn btn-primary me-2" @onclick="ApplyFilters">Filter</button>
        <button class="btn btn-secondary" @onclick="ClearFilters">Clear</button>
    </div>
</div>


@if (_result != null)
{
    <div class="table-responsive pt-3">
        <table class="table table-striped align-middle table-bordered text-center">
            <thead>
                <tr>
                    <th scope="col">Id</th>
                    <th scope="col">Date</th>
                    <th scope="col">Price</th>
                    <th scope="col">CreatedAt</th>
                    <th scope="col">UpdatedAt</th>
                    <th scope="col">CategoryId</th>
                    <th scope="col">Category Name</th>
                    <th scope="col">Comment</th>
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (!_result.Outlays.Data.Any())
                {
                    <tr>
                        <td colspan="9">No outlays available.</td>
                    </tr>
                }
                else
                {
                    foreach (var outlay in _result.Outlays.Data)
                    {
                        <tr>
                            <td scope="row">@outlay.Id</td>
                            <td>@outlay.Date</td>
                            <td>@outlay.Price.ToString("0.00")</td>
                            <td>@outlay.CreatedAt.ToLocalTime()</td>
                            @if (outlay.UpdatedAt != null)
                            {
                                <td>@outlay.UpdatedAt?.ToLocalTime()</td>
                            }
                            else
                            {
                                <td>-------</td>
                            }
                            <td>@outlay.CategoryId</td>
                            <td>@outlay.Category?.Name</td>
                            <td>@outlay.Comment</td>
                            <td>
                                <button type="button" class="btn btn-primary m-1" @onclick="() => navigationService.NavigateToUpdateOutlay(outlay.Id)">
                                    <i class="bi bi-pencil-square"></i> Edit
                                </button>
                                <button type="button" class="btn btn-danger m-1" @onclick="() => ConfirmDeleteAsync(outlay.Id)">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        <div class="pagination d-flex justify-content-center align-items-center mt-3 mb-3">
            <button
                class="btn btn-primary me-2"
                disabled="@((Page <= 1))"
                @onclick="() => navigationService.NavigateToOutlays(Page - 1, PageSize, true, _filters)">
                Previous
            </button>

            @foreach (var item in _pages)
            {
                <button
                    class="btn @((item == Page ? " btn-secondary" : "btn-outline-primary" )) me-1"
                    @onclick = "() => navigationService.NavigateToOutlays(item, PageSize, true, _filters)">
                    @item
                </button>
            }

            <button
                class="btn btn-primary ms-2"
                disabled="@((Page * PageSize) >= TotalCount)"
                @onclick="() => navigationService.NavigateToOutlays(Page + 1, PageSize, true, _filters)">
                Next
            </button>
        </div>
    </div>
}
else
{
    <p>Loading outlays...</p>
}

@code {
    private OutlayFilters _filters = new();
    private List<CategoryInputTextDto> _categories = new();

    private List<int> _pages = new();
    private GetOutlaysResult? _result;
    private int Page;
    private int PageSize;
    private long TotalCount;
    private long TotalPages;

    protected override async Task OnInitializedAsync()
    {
        Page = 1;
        PageSize = 50;

        if (navigationManager.TryGetQueryString<int>("page", out int page))
        {
            Page = page;
        }

        if (navigationManager.TryGetQueryString<int>("pageSize", out int pageSize))
        {
            PageSize = pageSize;
        }

        if (navigationManager.TryGetQueryString<int>("categoryId", out int categoryId))
        {
            _filters.CategoryId = categoryId;
        }

        if (navigationManager.TryGetQueryString<string>("comment", out string comment))
        {
            _filters.Comment = comment;
        }

        if (navigationManager.TryGetQueryString<string>("dateFrom", out string dateFrom))
        {
            _filters.DateFrom = DateOnly.Parse(dateFrom);
        }

        if (navigationManager.TryGetQueryString<string>("dateTo", out string dateTo))
        {
            _filters.DateTo = DateOnly.Parse(dateTo);
        }

        if (navigationManager.TryGetQueryString<decimal>("priceFrom", out decimal priceFrom))
        {
            _filters.PriceFrom = priceFrom;
        }

        if (navigationManager.TryGetQueryString<decimal>("priceTo", out decimal priceTo))
        {
            _filters.PriceTo = priceTo;
        }

        _result = await LoadDataAsync(Page, PageSize, _filters);
        _categories = (await categoryService.GetCategoriesInputTextAsync()).CategoriesInputText;

        TotalCount = _result!.Outlays.Count;
        TotalPages = (TotalCount + (int)PageSize - 1) / (int)PageSize;

        for (int i = 1; i <= (int)TotalPages; i++)
        {
            _pages.Add(i);
        }
    }

    private async Task<GetOutlaysResult?> LoadDataAsync(int page, int pageSize, OutlayFilters filters)
    {
        return await outlaysService.GetOutlaysAsync(page, pageSize, filters);
    }

    private async Task ConfirmDeleteAsync(long id)
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete outlay ID {id}?");

        if (confirmed)
        {
            await DeleteOutlayAsync(id);
        }
    }

    private async Task DeleteOutlayAsync(long id)
    {
        var response = await outlaysService.DeleteOutlayAsync(id);

        if (response)
        {
            await toastrService.ShowSuccess("Outlay deleted successfully", "Success");
            await Task.Delay(500);
            navigationService.NavigateToOutlays(Page, PageSize, true);
        }
        else
        {
            await toastrService.ShowError("Failed to delete outlay", "Error");
        }
    }

    private async Task ApplyFilters()
    {
        navigationService.NavigateToOutlays(1, PageSize, true, _filters);
    }

    private async Task ClearFilters()
    {
        navigationService.NavigateToOutlays(1, PageSize, true);
    }

}
